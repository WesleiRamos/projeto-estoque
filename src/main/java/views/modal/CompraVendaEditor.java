package views.modal;

import java.text.NumberFormat;
import views.utils.Actions;
import java.util.ArrayList;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;
import model.bean.CompraVendaProduto;
import reactive.Store;
import model.bean.GenericBean;
import model.bean.Produto;
import model.dao.ProdutoDAO;
import model.dao.querybuilder.GenericDAO;
import static views.utils.Image.LOGO;
import static views.utils.Image.loadImage;
import views.utils.Alerts;

/**
 *
 * @author Weslei Ramos
 * @param <DAO>
 * @param <BEAN>
 */
public class CompraVendaEditor<DAO extends GenericDAO, BEAN extends GenericBean & CompraVendaProduto> extends javax.swing.JDialog {
    
    private Class<DAO> c_dao;
    private Class<BEAN> c_bean;
    
    private Store store;
    private Actions action;
    private int selectedId = 0;
    private final ArrayList<Produto> produtos = new ArrayList<>();
    
    /**
     * 
     * @param c_dao
     * @param c_bean
     * @param selectedId
     * @param store 
     * @param action 
     */
    public CompraVendaEditor(Class<DAO> c_dao, Class<BEAN> c_bean, int selectedId, Store store, Actions action) {
        super((javax.swing.JFrame) null, ModalityType.APPLICATION_MODAL);

        this.c_dao = c_dao;
        this.c_bean = c_bean;
        this.store = store;
        this.action = action;
        this.selectedId = selectedId;

        initComponents();
        setIconImage(loadImage(LOGO, 32, 32));
        
        setLocationRelativeTo(null);
        setTitle(getTitleFromAction());
        title.setText(getTitleFromAction());
        produtoSelect.setEnabled(false);
        
        BEAN currentData = getCurrentData();
        for (ProdutoDAO produto: new ProdutoDAO().get()) {
            Produto bean = produto.toBean();
            produtoSelect.addItem(String.format("%d - %s", bean.getId(), bean.getDescricao()));
            if (action == Actions.EDIT) {
                if (currentData.getIdProduto() == bean.getId()) {
                    produtoSelect.setSelectedIndex(produtos.size());
                }
            }
            produtos.add(bean);
        }
        
        if (action == Actions.EDIT) {
            quantidade.setValue(currentData.getQuantidade());
        } else {
            quantidade.setValue(0);
            produtoSelect.setEnabled(true);
        }       
        
        NumberFormatter formatter = new NumberFormatter(NumberFormat.getInstance());
        formatter.setAllowsInvalid(false);
        
        quantidade.setFormatterFactory(new DefaultFormatterFactory(formatter));
    }
    
    private String classNameP() {
        return c_bean.getSimpleName().replace("Produto", "");
    }
    
    /**
     * 
     * @param action
     * @return 
     */
    private String getTitleFromAction() {
        switch (action) {
            case CREATE:
                return String.format("Adicionar produto da %s", classNameP().toLowerCase());          
            case EDIT:
                return String.format("Editar produto da %s", classNameP().toLowerCase());
            default:
                return "";
        }
    }
    
    /**
     * Tenta obter o bean selecionado
     * @return 
     */
    private BEAN getCurrentData() {
        try {
            if (this.action == Actions.CREATE)
                return this.c_bean.getConstructor().newInstance();
            
            BEAN bean = (BEAN) store.get("selected");
            return bean != null ? bean : this.c_bean.getConstructor().newInstance();
        } catch (Exception ex) {
            Alerts.errorLog("Erro ao executar a ação", ex);
        }
        
        return null;
    }
    
    
    
    /**
     * Obtém os dados inseridos e salva em um bean
     * @return 
     */
    private BEAN getData() {
        BEAN bean = getCurrentData();
        bean.setId(selectedId);
        bean.setQuantidade(Integer.valueOf(quantidade.getValue().toString()));
        Produto produto = produtos.get(produtoSelect.getSelectedIndex());
        bean.setIdProduto(produto.getId());
        bean.setValorUnitario(produto.getValorUnitario());
        return bean;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        produtoSelect = new javax.swing.JComboBox<>();
        quantidade = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jButton1.setText("Salvar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        title.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        title.setText("Compra Venda Produtos");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Produto");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Quantidade");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(title)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel1))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(produtoSelect, 0, 459, Short.MAX_VALUE)
                                    .addComponent(quantidade))))))
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(title)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(produtoSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(quantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void close() {
        this.setVisible(false);
        this.dispose();
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.close();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (produtoSelect.getSelectedIndex() >= 0) {
            this.store.set("edited", this.getData());
            this.close();
        } else {
            Alerts.error(this.getParent(), "Erro ao salvar", "É necessário selecionar o produto");
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JComboBox<String> produtoSelect;
    private javax.swing.JFormattedTextField quantidade;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
